from fastapi import FastAPI
from langgraph import LangGraph
from langgraph.agents import Node, Graph
from sqlalchemy import create_engine, Column, Integer, String, Text, DECIMAL, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import openai

# Initialize FastAPI
app = FastAPI()

# Database setup (PostgreSQL)
DATABASE_URL = "postgresql://user:password@localhost/mydatabase"
engine = create_engine(DATABASE_URL)
Base = declarative_base()
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Define Product and Supplier models
class Supplier(Base):
    __tablename__ = "suppliers"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True)
    contact_info = Column(Text)
    product_categories = Column(Text)

class Product(Base):
    __tablename__ = "products"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String)
    brand = Column(String)
    price = Column(DECIMAL)
    category = Column(String)
    description = Column(Text)
    supplier_id = Column(Integer, ForeignKey('suppliers.id'))

# LangGraph Setup
graph = LangGraph()

# Define a custom LangGraph Node for fetching product data
class ProductQueryNode(Node):
    def __init__(self, session):
        self.session = session

    def execute(self, query):
        # Simple logic to filter products
        if "brand" in query:
            brand = query.split("brand ")[1]
            return self.session.query(Product).filter(Product.brand.ilike(f"%{brand}%")).all()
        elif "supplier" in query:
            supplier_name = query.split("supplier ")[1]
            supplier = self.session.query(Supplier).filter(Supplier.name.ilike(f"%{supplier_name}%")).first()
            return self.session.query(Product).filter(Product.supplier_id == supplier.id).all()
        else:
            return self.session.query(Product).all()

# Create an endpoint to fetch products via LangGraph
@app.get("/query_product/")
async def query_product(query: str):
    db = SessionLocal()
    product_node = ProductQueryNode(session=db)
    graph.add_node(product_node)

    # Use LangGraph to process the query
    response = graph.run(query)
    db.close()

    return {"result": response}
